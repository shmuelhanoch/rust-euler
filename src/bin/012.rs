// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28

//We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

use tupletools::snd;

use rust_euler::primes;

fn factors(n: i64) -> i64 {
    let prime_factors: Vec<(i64, i64)> = primes::factorize(n);
    prime_factors.iter().map(snd).map(|x| x + 1).product()
}

fn main() {
    let mut n: i64 = 1;
    let mut i = 1;

    loop {
        if factors(n) > 500 {
            println!("{}", n);
            break
        }
        i += 1;
        n += i;
    }
}
